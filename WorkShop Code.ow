rule("Player.1")
{
	event
	{
		Player Dealt Healing;
		All;
		All;
	}

	conditions
	{
		Player Variable(Event Player, A) == 0;
	}

	actions
	{
		Small Message(Event Player, String("{0} + {1}", Hero Icon String(Hero Of(Event Player)), String("{0} - {1}", Event Healing, Null,
			Null), Null));
		Modify Global Variable(A, Add, 1);
		Wait(1, Ignore Condition);
		Modify Global Variable(A, Subtract, 1);
	}
}

rule("Player.2")
{
	event
	{
		Player Received Healing;
		All;
		All;
	}

	conditions
	{
		Player Variable(Event Player, A) == 0;
	}

	actions
	{
		Small Message(Event Player, String("{0} - {1}", Hero Icon String(Hero Of(Event Player)), String("{0} - {1}", Event Healing, Null,
			Null), Null));
		Modify Global Variable(A, Add, 1);
		Wait(1, Ignore Condition);
		Modify Global Variable(A, Subtract, 1);
	}
}

rule("Player.3")
{
	event
	{
		Player Dealt Damage;
		All;
		All;
	}

	conditions
	{
		Player Variable(Event Player, A) == 0;
	}

	actions
	{
		Small Message(Event Player, String("{0} - {1}", Hero Icon String(Hero Of(Event Player)), String("{0} + {1}", Null, Event Damage,
			Null), Null));
		Modify Global Variable(A, Add, 1);
		Wait(1, Ignore Condition);
		Modify Global Variable(A, Subtract, 1);
	}
}

rule("Player.4")
{
	event
	{
		Player Took Damage;
		All;
		All;
	}

	conditions
	{
		Player Variable(Event Player, A) == 0;
	}

	actions
	{
		Small Message(Event Player, String("{0} - {1}", Hero Icon String(Hero Of(Event Player)), String("{0} - {1}", Null, Event Damage,
			Null), Null));
		Modify Global Variable(A, Add, 1);
		Wait(1, Ignore Condition);
		Modify Global Variable(A, Subtract, 1);
	}
}

rule("Bastion")
{
	event
	{
		Ongoing - Each Player;
		All;
		Bastion;
	}

	conditions
	{
		Is Button Held(Event Player, Interact) == True;
		Is Button Held(Event Player, Primary Fire) == False;
	}

	actions
	{
		Disallow Button(Event Player, Primary Fire);
		Wait(0.016, Ignore Condition);
		Start Holding Button(Event Player, Primary Fire);
		Wait(0.016, Ignore Condition);
		Allow Button(Event Player, Primary Fire);
		Wait(0.016, Ignore Condition);
		Stop Holding Button(Event Player, Primary Fire);
		Wait(0.016, Ignore Condition);
		Loop If Condition Is True;
		Disallow Button(Event Player, Primary Fire);
		Wait(0.016, Ignore Condition);
		Allow Button(Event Player, Primary Fire);
	}
}

rule("Torbjörn")
{
	event
	{
		Ongoing - Each Player;
		All;
		Torbjörn;
	}

	conditions
	{
		Is Button Held(Event Player, Interact) == True;
		Is Button Held(Event Player, Primary Fire) == False;
	}

	actions
	{
		Disallow Button(Event Player, Primary Fire);
		Wait(0.016, Ignore Condition);
		Start Holding Button(Event Player, Primary Fire);
		Wait(0.016, Ignore Condition);
		Allow Button(Event Player, Primary Fire);
		Wait(0.016, Ignore Condition);
		Stop Holding Button(Event Player, Primary Fire);
		Wait(0.016, Ignore Condition);
		Loop If Condition Is True;
	}
}

rule("Genji")
{
	event
	{
		Ongoing - Each Player;
		All;
		Genji;
	}

	conditions
	{
		Is Button Held(Event Player, Interact) == True;
		Is Button Held(Event Player, Primary Fire) == False;
	}

	actions
	{
		Disallow Button(Event Player, Primary Fire);
		Wait(0.016, Ignore Condition);
		Start Holding Button(Event Player, Primary Fire);
		Wait(0.016, Ignore Condition);
		Allow Button(Event Player, Primary Fire);
		Wait(0.016, Ignore Condition);
		Stop Holding Button(Event Player, Primary Fire);
		Wait(0.016, Ignore Condition);
		Loop If Condition Is True;
		Disallow Button(Event Player, Primary Fire);
		Wait(0.016, Ignore Condition);
		Allow Button(Event Player, Primary Fire);
	}
}

rule("Hanzo")
{
	event
	{
		Ongoing - Each Player;
		All;
		Hanzo;
	}

	conditions
	{
		Is Button Held(Event Player, Interact) == True;
		Is Button Held(Event Player, Primary Fire) == False;
	}

	actions
	{
		Disallow Button(Event Player, Primary Fire);
		Wait(0.016, Ignore Condition);
		Start Holding Button(Event Player, Primary Fire);
		Wait(0.016, Ignore Condition);
		Allow Button(Event Player, Primary Fire);
		Wait(0.016, Ignore Condition);
		Stop Holding Button(Event Player, Primary Fire);
		Wait(0.016, Ignore Condition);
		Loop If Condition Is True;
		Disallow Button(Event Player, Primary Fire);
		Wait(0.016, Ignore Condition);
		Allow Button(Event Player, Primary Fire);
	}
}

rule("fix.")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Is Crouching(Event Player) == True;
		Is Communicating(Event Player, Acknowledge) == True;
	}

	actions
	{
		Disallow Button(Event Player, Primary Fire);
		Wait(0.016, Ignore Condition);
		Allow Button(Event Player, Primary Fire);
	}
}

rule("Speed")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Is Button Held(Event Player, Primary Fire) == True;
	}

	actions
	{
		Set Projectile Speed(Event Player, 100.001);
		Wait(0.016, Ignore Condition);
		Set Projectile Speed(Event Player, 100.001);
		Wait(0.016, Ignore Condition);
		Loop If Condition Is True;
	}
}
