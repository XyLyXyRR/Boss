rule("Author: XyLyXyRR")
{
	event
	{
		Ongoing - Global;
	}

	actions
	{
		Set Global Variable At Index(A, 0, Players In Slot(0, Team 2));
		Set Global Variable At Index(A, 1, Hero Of(Value In Array(Global Variable(A), 0)));
		Set Global Variable At Index(A, 2, Health(Value In Array(Global Variable(A), 0)));
		Set Global Variable At Index(A, 3, Ultimate Charge Percent(Value In Array(Global Variable(B), 0)));
		Set Global Variable At Index(B, 0, Players On Hero(Hero(Mercy), Team 1));
		Set Global Variable At Index(B, 1, Hero(Mercy));
		Create HUD Text(All Players(All Teams), Hero Icon String(Hero Of(Players In Slot(0, Team 2))), Players In Slot(0, Team 2), String(
			"{0} {1}", String("{0} -> {1}", Health(Players In Slot(0, Team 2)), Ultimate Charge Percent(Players In Slot(0, Team 2)), Null),
			String("{0}!", Value In Array(Global Variable(A), 4), Null, Null), Null), Left, 0, Red, Red, White, Visible To and String);
		Set Global Variable At Index(C, 0, Last Text ID);
		Create HUD Text(All Players(All Teams), Hero Icon String(Hero(Mercy)), Players On Hero(Hero(Mercy), Team 1), String("{0}!", String(
			"Protect", Null, Null, Null), Null, Null), Left, 1, Blue, Blue, Blue, Visible To and String);
		Create Effect(All Players(All Teams), Sparkles, Blue, Players On Hero(Hero(Mercy), Team 1), 1, Visible To Position and Radius);
		Set Global Variable At Index(B, 2, Last Created Entity);
	}
}

rule("Inatialize")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Is Waiting For Players == True;
	}

	actions
	{
		Set Global Variable At Index(A, 7, 1);
	}
}

rule("Inatialize.1")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Is Waiting For Players == False;
		Value In Array(Global Variable(A), 7) == 1;
	}

	actions
	{
		Set Global Variable At Index(A, 7, 0);
		Set Global Variable At Index(A, 4, 0);
	}
}

rule("Kill")
{
	event
	{
		Player Died;
		Team 1;
		Mercy;
	}

	conditions
	{
		Attacker == All Players(Team 2);
	}

	actions
	{
		Modify Global Variable At Index(A, 4, Add, 0.500);
	}
}

rule("Invisible skill")
{
	event
	{
		Ongoing - Each Player;
		Team 2;
		All;
	}

	conditions
	{
		Is Communicating(All Players(Team 2), Ultimate Status) == True;
		Value In Array(Global Variable(A), 4) >= 1;
	}

	actions
	{
		Set Slow Motion(30);
		Set Aim Speed(All Players(All Teams), 30);
		Big Message(All Players(All Teams), String("{0}!!", String("Danger", Null, Null, Null), Null, Null));
		Modify Global Variable At Index(A, 4, Subtract, 1);
		Set Global Variable At Index(A, 5, Random Value In Array(All Living Players(Team 1)));
		Set Healing Received(Value In Array(Global Variable(A), 5), 0);
		Set Status(Value In Array(Global Variable(A), 5), Random Value In Array(All Players(Team 2)), Burning, 9999);
		Modify Global Variable At Index(A, 6, Add, 2);
		Wait(2, Ignore Condition);
		Kill(Value In Array(Global Variable(A), 5), Event Player);
		Set Slow Motion(100);
		Set Aim Speed(All Players(All Teams), 100);
		Set Healing Received(Value In Array(Global Variable(A), 5), 100);
		Clear Status(Value In Array(Global Variable(A), 5), Burning);
	}
}

rule("Invisible skill.1")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Value In Array(Global Variable(A), 6) > 0;
	}

	actions
	{
		Play Effect(All Players(All Teams), Ring Explosion, Red, Value In Array(Global Variable(A), 5), 5);
		Play Effect(All Players(All Teams), Bad Explosion, Red, Value In Array(Global Variable(A), 5), 5);
		Play Effect(All Players(All Teams), Explosion Sound, Red, Value In Array(Global Variable(A), 5), 100);
		Modify Global Variable At Index(A, 6, Subtract, 0.200);
		Wait(0.200, Ignore Condition);
		Loop If Condition Is True;
	}
}

rule("Genji")
{
	event
	{
		Ongoing - Each Player;
		All;
		Genji;
	}

	conditions
	{
		Is Button Held(Event Player, Interact) == True;
		Is Button Held(Event Player, Primary Fire) == False;
	}

	actions
	{
		Disallow Button(Event Player, Primary Fire);
		Wait(0.016, Ignore Condition);
		Start Holding Button(Event Player, Primary Fire);
		Wait(0.016, Ignore Condition);
		Allow Button(Event Player, Primary Fire);
		Wait(0.016, Ignore Condition);
		Stop Holding Button(Event Player, Primary Fire);
		Wait(0.016, Ignore Condition);
		Loop If Condition Is True;
		Disallow Button(Event Player, Primary Fire);
		Wait(0.016, Ignore Condition);
		Allow Button(Event Player, Primary Fire);
	}
}

rule("Speed.Orisa")
{
	event
	{
		Ongoing - Each Player;
		All;
		Orisa;
	}

	conditions
	{
		Is Button Held(Event Player, Primary Fire) == True;
	}

	actions
	{
		Set Projectile Speed(Event Player, 100.001);
		Wait(0.016, Ignore Condition);
		Set Projectile Speed(Event Player, 100.001);
		Wait(0.016, Ignore Condition);
		Loop If Condition Is True;
	}
}

rule("Speed.Wrecking ball")
{
	event
	{
		Ongoing - Each Player;
		All;
		Wrecking Ball;
	}

	conditions
	{
		Is Button Held(Event Player, Primary Fire) == True;
	}

	actions
	{
		Set Projectile Speed(Event Player, 100.001);
		Wait(0.016, Ignore Condition);
		Set Projectile Speed(Event Player, 100.001);
		Wait(0.016, Ignore Condition);
		Loop If Condition Is True;
	}
}

rule("Speed.Bastion")
{
	event
	{
		Ongoing - Each Player;
		All;
		Bastion;
	}

	conditions
	{
		Is Button Held(Event Player, Primary Fire) == True;
	}

	actions
	{
		Set Projectile Speed(Event Player, 100.001);
		Wait(0.016, Ignore Condition);
		Set Projectile Speed(Event Player, 100.001);
		Wait(0.016, Ignore Condition);
		Loop If Condition Is True;
	}
}

rule("Speed.Soldier: 76")
{
	event
	{
		Ongoing - Each Player;
		All;
		Soldier: 76;
	}

	conditions
	{
		Is Button Held(Event Player, Primary Fire) == True;
	}

	actions
	{
		Set Projectile Speed(Event Player, 100.001);
		Wait(0.016, Ignore Condition);
		Set Projectile Speed(Event Player, 100.001);
		Wait(0.016, Ignore Condition);
		Loop If Condition Is True;
	}
}

rule("Speed.Sombra")
{
	event
	{
		Ongoing - Each Player;
		All;
		Sombra;
	}

	conditions
	{
		Is Button Held(Event Player, Primary Fire) == True;
	}

	actions
	{
		Set Projectile Speed(Event Player, 100.001);
		Wait(0.016, Ignore Condition);
		Set Projectile Speed(Event Player, 100.001);
		Wait(0.016, Ignore Condition);
		Loop If Condition Is True;
	}
}

rule("Speed.Tracer")
{
	event
	{
		Ongoing - Each Player;
		All;
		Tracer;
	}

	conditions
	{
		Is Button Held(Event Player, Primary Fire) == True;
	}

	actions
	{
		Set Projectile Speed(Event Player, 100.001);
		Wait(0.016, Ignore Condition);
		Set Projectile Speed(Event Player, 100.001);
		Wait(0.016, Ignore Condition);
		Loop If Condition Is True;
	}
}

rule("Speed.Widowmaker")
{
	event
	{
		Ongoing - Each Player;
		All;
		Widowmaker;
	}

	conditions
	{
		Is Button Held(Event Player, Primary Fire) == True;
	}

	actions
	{
		Set Projectile Speed(Event Player, 100.001);
		Wait(0.016, Ignore Condition);
		Set Projectile Speed(Event Player, 100.001);
		Wait(0.016, Ignore Condition);
		Loop If Condition Is True;
	}
}
